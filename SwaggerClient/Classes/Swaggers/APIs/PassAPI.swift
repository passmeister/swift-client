//
// PassAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class PassAPI: APIBase {
    /**
     This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createOrUpdatePass(passTypeId passTypeId: AnyObject, passId: AnyObject? = nil, completion: ((error: ErrorType?) -> Void)) {
        createOrUpdatePassWithRequestBuilder(passTypeId: passTypeId, passId: passId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     - POST /pass
     - This method creates or (if the pass id already exists) updates a pass, so you don't have to track ids and creation status of your passes.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass (provided by you when creating the pass or automatically set by passmeister) (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func createOrUpdatePassWithRequestBuilder(passTypeId passTypeId: AnyObject, passId: AnyObject? = nil) -> RequestBuilder<Void> {
        let path = "/pass"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "passTypeId": passTypeId,
            "passId": passId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete pass by pass id.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deletePass(passTypeId passTypeId: AnyObject, passId: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        deletePassWithRequestBuilder(passTypeId: passTypeId, passId: passId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Delete pass by pass id.
     - DELETE /pass
     - Delete pass by pass id.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass 

     - returns: RequestBuilder<Void> 
     */
    public class func deletePassWithRequestBuilder(passTypeId passTypeId: AnyObject, passId: AnyObject) -> RequestBuilder<Void> {
        let path = "/pass"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "passTypeId": passTypeId,
            "passId": passId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get pass information by pass id.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getPass(passTypeId passTypeId: AnyObject, passId: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        getPassWithRequestBuilder(passTypeId: passTypeId, passId: passId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get pass information by pass id.
     - GET /pass
     - Get pass information by pass id.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter passId: (query) id of the pass 

     - returns: RequestBuilder<Void> 
     */
    public class func getPassWithRequestBuilder(passTypeId passTypeId: AnyObject, passId: AnyObject) -> RequestBuilder<Void> {
        let path = "/pass"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "passTypeId": passTypeId,
            "passId": passId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Retrieve the list of active pass ids for a given pass type.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func passList(passTypeId passTypeId: AnyObject, page: AnyObject? = nil, limit: AnyObject? = nil, completion: ((error: ErrorType?) -> Void)) {
        passListWithRequestBuilder(passTypeId: passTypeId, page: page, limit: limit).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Retrieve the list of active pass ids for a given pass type.
     - GET /pass/list
     - Retrieve the list of active pass ids for a given pass type.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter page: (query)  (optional)
     - parameter limit: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func passListWithRequestBuilder(passTypeId passTypeId: AnyObject, page: AnyObject? = nil, limit: AnyObject? = nil) -> RequestBuilder<Void> {
        let path = "/pass/list"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "passTypeId": passTypeId,
            "page": page,
            "limit": limit
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Send updates to all active passes for a given pass type.
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func passSync(passTypeId passTypeId: AnyObject, completion: ((error: ErrorType?) -> Void)) {
        passSyncWithRequestBuilder(passTypeId: passTypeId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Send updates to all active passes for a given pass type.
     - POST /pass/sync
     - For example: you changed the pass type layout and now you want to update all installed passes. (The API call only confirms the scheduling of the updates, actual updating of passes on your customers devices can take a while.)
     
     - parameter passTypeId: (query) your pass type id, for example P963493 (Urban Fitness) 

     - returns: RequestBuilder<Void> 
     */
    public class func passSyncWithRequestBuilder(passTypeId passTypeId: AnyObject) -> RequestBuilder<Void> {
        let path = "/pass/sync"
        let URLString = SwaggerClientAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "passTypeId": passTypeId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
